name: 'repo add'
description: 'downloads github release assets and checks them in'
inputs:
  name:
    description: 'name of the repository to create'
    required: false
  repository:
    description: 'repository to search for a release in'
    required: true
  release:
    description: 'release id to download'
    required: true
  branch:
    description: 'manjaro lifecycle (unstable/testing/stable)'
    required: true
  gpg_keyid:
    description: 'id of the key used to sign the database with'
    required: false
  gpg_secret_base64:
    description: 'base64 encoded key used to sign the database with'
    required: false
  token:
    description: 'github token used to commit changes'
    required: false
  lfs:
    description: enable lfs support
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: check tools are installed
      shell: bash
      run: |
        command -v git
        command -v git-lfs
        command -v gh
        command -v repo-add
    - name: wait
      uses: softprops/turnstyle@87724d307f37360709253b3d749fa52f1e62fa19
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: checkout
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
      with:
        fetch-depth: 1
        lfs: ${{ inputs.lfs }}
        path: 'repo'
        ref: ${{ inputs.branch }}
    - name: set workdir
      shell: bash
      run: echo "WORKDIR=/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/repo" >>$GITHUB_ENV
    - name: setup git
      shell: bash
      working-directory: ${{ env.WORKDIR }}
      run: |
        git config user.name repo-add-bot
        git config user.email info@manjaro.download
    - name: setup gpg
      shell: bash
      working-directory: ${{ env.WORKDIR }}
      if: ${{ inputs.gpg_keyid != '' && inputs.gpg_secret_base64 != '' }}
      run: |
        # import signing key (no passphrase)
        cat <(echo -e "${{ inputs.gpg_secret_base64 }}" | base64 --decode) | gpg --batch --import
        pacman-key --init
        pacman-key --keyserver keyserver.ubuntu.com --recv-keys ${{ inputs.gpg_keyid }}
        pacman-key --lsign-key ${{ inputs.gpg_keyid }}
    - name: download the package to be added to the repo
      shell: bash
      working-directory: ${{ env.WORKDIR }}
      id: download_release
      run: |
        echo ${{ github.token }} | gh auth login --with-token
        gh release download ${{ inputs.release }} --repo ${{ inputs.repository }} -D /tmp/
        ls -lh /tmp/*.zst*
    - name: copy new files into place
      shell: bash
      working-directory: ${{ env.WORKDIR }}
      run: |
        for arch in x86_64 aarch64; do
          repo_dir=$arch
          mkdir -p $repo_dir
          cp -f /tmp/*-${arch}* $repo_dir || echo "no ${arch} files found"
          cp -f /tmp/*-any* $repo_dir || echo "no any files found"

          if [[ `git status --porcelain` ]]; then
            db_path="$repo_dir/${{ inputs.name || github.event.repository.name }}.db.tar.gz"
            files_path="$repo_dir/${{ inputs.name || github.event.repository.name }}.files.tar.gz"
            rm -f $db_path $files_path
            repo-add --new --remove --prevent-downgrade $repo_dir/${{ inputs.name || github.event.repository.name }}.db.tar.gz $repo_dir/*.zst || echo "no files found for $arch"
          fi
        done

        rm -f **/*.old* || echo 'no .old files found'

        if [[ `git status --porcelain` ]]; then
          git config http.version HTTP/1.1
          git add **/*
          git status --porcelain
          git commit -m "chore: added to ${{ inputs.branch }}: ${{ inputs.repository }}@${{ inputs.release }}"
          git push origin ${{ inputs.branch }}
        fi
